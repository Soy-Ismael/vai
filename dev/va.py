# Dato curioso a fecha de hoy 5/marzo/2024 3:27 hora dominicana hay un total de 529 lineas de c√≥digo en va.py, hay 265 lineas de c√≥digo y otras 264 de c√≥mentarios aproximadamente (los espacios en blanco se contaron como lineas de c√≥digo).
# ESTRUCTURA Y REPARTICION DE TRABAJO DEL ASISTENTE
# *     Jared y Jairon
#todo 1 - Grabar voz del usuario üé§ ‚úîÔ∏è
#todo 2 - Convertir lo que dijo en texto üñã ‚úîÔ∏è
# 
# *     Xaviel e Ismael
#todo 3 - Procesar la intenci√≥n del usuario ‚ùì (modelo de IA) ‚úîÔ∏è
#todo 4 - Ejecutar la acci√≥n deseada üë®‚Äçüè≠ ‚úîÔ∏è
#
# ?      Proximamente
#todo 5 - Preparar respuesta (en texto) üí¨ ‚úîÔ∏è
#todo 6 - Convertir en audio y reproducir ü¶ª ‚úîÔ∏è

#* Comprobar conectividad del usuario
from transfer_data import Transaction # M√≥dulo local para sustituir a config y readfile, ademas, a√±ade nuevos m√©todos
import os # M√≥dulo para administrar cosas afines al sistema operativo (rutas, cierre de programas, etc.)
import sys

# Instanciar clase Transaction
Data_transfer = Transaction()

if Data_transfer.check_internet_connection():
    print(Data_transfer.green_color+'Conexi√≥n a internet ‚úîÔ∏è'+Data_transfer.normal_color)
    # pass
else:
    print(Data_transfer.err_template+'Conecci√≥n a internet perdida ‚úñÔ∏è'+Data_transfer.normal_color)
    # sys.exit(0)

# Importaciones 
import speech_recognition as sr # M√≥dulo para reconocer audio y convertir a texto (STT)
import pyttsx3 # M√≥dulo para convertir de texto a audio (TTS)
from dotenv import get_key # M√≥dulo para cargar api-key en archivo .env
import datetime # M√≥dulo para manejar la hora
import pywhatkit # M√≥dulo para enviar mensajes de whatapp y abrir contenido en youtube (es un kit)
import random #Nuevo m√≥dulo para generar n√∫meros aleatorios
import wikipedia #Nuevo modulo para resumir articulos de wikipedia
# import winsound #Nuevo modulo para reproducir sonido, (no es necesario instalar con pip - solo funciona con windows)
from playsound import playsound #Nuevo modulo para reproducir sonido, (funciona en todos los sistemas operativos y reproduce .mp3, .ogg, .wav)
# import urllib.request #Nuevo modulo para conteo de suscriptores
import pyjokes # M√≥dulo para chistes
import time # M√≥dulo para temporizador - importado solo en caso de que se necesite
start_time = time.time()
import re # M√≥dulo expresiones regulares
import asyncio # M√≥dulo para ejecutar c√≥digo as√≠ncrono
# from voice_synthesizer import synthesize_to_speaker # M√≥dulo local creado para tts de microsoft (m√°s voces y calidad que pyttsx3, no depende de voces en el ordenador, es necesario crear cuentan de microsoft azure y crear api key para servicios de voz)
from days import getDaysAgo 
# import spoty # M√≥dulo para reproducir contenido en spotify (no esta en uso actualmente)
# from sys import exit #Para trabajar con sys.exit() en caso de ser necesario
from banner import figlet_banner # Nuevo m√≥dulo local para imprimir banner de los desarrolladores
from report import create_report # M√≥dulo para crear reportes de excel a partir de un archivo con formato definido
# from whisperBeta import main # M√≥dulo para reconocer el audio mediante whisper, recibe como parametro el modelo que va a utilizar para reconocer el audio (tiny, base, medium, large), el valor por defecto es base
#* Open AI - Chat Gpt
from openai import OpenAI # M√≥dulo para inteligencia artificial
# from audio import tts
# Google - Gemini
# import pathlib
# import textwrap

txt_path = 'dev/txt/'

#* Default const
# name = 'jarvis' # Nombre por el que se llamara al asistente (para desarrollar m√°s tarde)
# lang = 'es-ES'
# time_format = "%I:%M:%p"
# wiki_lang = 'es'

# green_color = Data_transfer.green_color
# cian_color = Data_transfer.cian_color
# blue_color = Data_transfer.blue_color
# yellow_color = Data_transfer.yellow_color
# red_color = Data_transfer.red_color
# negrita = Data_transfer.negrita
# normal_color = Data_transfer.normal_color

#* text templates
user_template = f"{Data_transfer.negrita}Usuario: {Data_transfer.normal_color}"
# va_template = f"{Data_transfer.negrita}{name}: {Data_transfer.normal_color}" #Declarada m√°s abajo
err_template = f"{Data_transfer.red_color}{Data_transfer.negrita}ERROR: {Data_transfer.normal_color}"
warning_template = f"{Data_transfer.yellow_color}{Data_transfer.negrita}ADVERTENCIA: {Data_transfer.normal_color}"

#* De texto a voz - Modulo 6
engine = pyttsx3.init()

try:
    # global voice
    # voice_id = Data_transfer.read_config_file_line('voice_number')
    voice_id = int(Data_transfer.read_config_file_line('voice_number'))

    # if voice != None:
    #     voice_id = voice

    voices = engine.getProperty('voices')
    engine.setProperty('voice', voices[voice_id].id)
except IndexError:
    print(f"No existe la voz con el ID {voice_id}")
    print(f"{err_template}en configuraci√≥n de idiomas")

    for voice in voices:
        print(f'{Data_transfer.yellow_color} = = = = = = = =  = = = = = = {Data_transfer.normal_color}')
        print(f'ID:{Data_transfer.cian_color} {voice.id} {Data_transfer.normal_color}')
        print(f'Name:{Data_transfer.cian_color} {voice.name} {Data_transfer.normal_color}')
        # print(f'Languages:{Data_transfer.cian_color} {voice.languages} {Data_transfer.normal_color}')
        # print(f'Age:{Data_transfer.cian_color} {voice.age} {Data_transfer.normal_color}')
        # print(f'Gender:{Data_transfer.cian_color} {voice.gender} {Data_transfer.normal_color}')

    #! No utilizar el exit() para programas reales, lo mejor seria utilizar el sys.exit()
    # os._exit(0)
    # exit()
    sys.exit(0)
# for voice in voices:
#     print(voice)

# figlet_banner(text='USAR API CON PRUDENCIA', banner_index=5)
figlet_banner(banner_index=5)

#* Funci√≥n para hablar, recibe el texto a reproducir como parametro
def talk(text):
    engine.say(text)
    engine.runAndWait()
    # synthesize_to_speaker(text, 'es-MX-DaliaNeural')

#* Funci√≥n para detener el habla en caso de ser necesario
def no_talk():
    engine.stop()
# talk("Hola, ¬øcomo estas?")


#* De voz a texto - Modulo 1 & 2
rec = sr.Recognizer()

# Ajuste del umbral de audio (En t√©rminos simples, si la energ√≠a (volumen) de la se√±al de audio es mayor que el umbral, el sistema considera que est√° recibiendo voz. Si la energ√≠a es menor que el umbral, el sistema considera que no hay voz y que cualquier sonido que est√© recibiendo es simplemente ruido)

# 2300 tiene problemas para entender
# rec.energy_threshold = 2900
#* Funci√≥n para escuchar la petici√≥n del usuario, se puede invocar durante la ejecuci√≥n del programa, lo que permite que el asistente pueda volver a escuchar en cualquier punto del programa con solo invocar la funci√≥n
def listen():
    # Acceder al microfono del dispositivo
    try:
        with sr.Microphone() as source:
            try:
                text = ''
                status = False

                print(f"{Data_transfer.green_color}Escuchando... {Data_transfer.normal_color}")

                # winsound.PlaySound('sounds/sonido_apertura.wav', winsound.SND_FILENAME)
                # playsound('sounds/sonido_apertura.wav')
                # os.system("aplay sounds/sonido_apertura.wav")
                # rec.adjust_for_ambient_noise(source,duration=1) #Ajustar para ruido de fondo, toma una muestra de 1 segundo para el ruido de fondo
                audio = rec.listen(source)

                #? Linea alternativa si el asistente escucha indefinidamente
                # audio = rec.listen(source, timeout = 2, phrase_time_limit = 4)

                print(f"{Data_transfer.blue_color}Analizando... {Data_transfer.normal_color}")
                text = rec.recognize_google(audio, language = lang).lower()
                # print("Texto: " + text)

                # winsound.PlaySound('sounds/sonido_cierre.wav', winsound.SND_FILENAME | winsound.SND_ASYNC)
                # playsound('sounds/sonido_cierre.wav')
                # os.system("aplay sounds/sonido_cierre.wav")
                print(user_template + text)

                if name in text:
                    text = text.replace(name, '')
                    # print('Texto con nombre omitido: ' + text)
                    status = True

                # return text
                return {'text': text, 'status': status}
                
            except sr.WaitTimeoutError:
                print(err_template + 'No se detecto entrada de audio.')
                # return False
            except sr.UnknownValueError:
                print(err_template + 'Google Speech Recognition no pudo entender el audio.')
                talk('No he podido entender eso, intentemoslo nuevamente')
                listen()
            except sr.RequestError as e:
                print(err_template + f"No se pudo solicitar resultados de Google Speech Recognition; {0}".format(e))
                # return False
            except TypeError:
                print(err_template + 'Variable aun sin datos')
                # return False
            except KeyboardInterrupt:
                print(err_template + 'Acci√≥n cancelada por el usuario.')
                # return False
            playsound('sounds/sonido_cierre.wav')
            # os.system("aplay sounds/Sonido_Cierre.wav")

    except KeyboardInterrupt:
        print(err_template + 'Acci√≥n cancelada por el usuario.')
        # return False
    except TypeError:
        print(err_template + 'Variable aun sin datos')
        # return False
    except:
        print(err_template + 'No hay microfono seleccionado')
        talk('No se encontro microfono, por favor, configure el dispositivo de entrada')
        # return False


try:
    #* Funci√≥n para cargar los datos de archivo de configuraci√≥n en las variables de asistente
    def load_data(data_to_extract):
        global name, lang, wiki_lang, time_format, voice
        name, lang, time_format, voice = data_to_extract
        wiki_lang = lang[slice(0,2)]

        # print('Nombre: ' + name)
        # print('Idioma: ' + lang)
        # print('Idioma de wikipedia: ' + wiki_lang)
        # print('Formato de hora: ' + time_format)
        # print('Indice de voz: ' + voice)

    #* Ejecutar funci√≥n que lee archivo de configuraci√≥n
    data = Data_transfer.readfile()
    if type(data) != dict or not Data_transfer.check_file_integrity():
        # print(err_template+'Archivos de configuraci√≥n corruptos')
        (err_template+'Datos de configuraci√≥n corruptos o inexistentes')
        talk('Error en datos de configuraci√≥n, por favor restablezca el archivo.')
        Data_transfer.initial_config()

        data = Data_transfer.readfile()
        load_data(data.values())
    else:
        load_data(data.values())
except KeyboardInterrupt:
    print(f'\n{warning_template}Acci√≥n cancelada por el usuario.')

#* Templates 2 - variable faltante, es necesario colocarla aqu√≠ luego de que se tiene el valor de "name"
va_template = f"{Data_transfer.negrita}{name}: {Data_transfer.normal_color}"

#* Ejecutar la funci√≥n para escuchar al usuario y almacenar resultado en variable text para su futura evaluaci√≥n
# text = listen() - Ahora se ejecuta dentro de la funci√≥n run, de modo que run se hace m√°s autosuficiente
# text = {'text' : 'env√≠a Hola ¬øc√≥mo estas? a raylin', 'status': True}

#* PARTE DE Ismael Y Xaviel - con open AI - m√≥dulo 3
# *INICIO CHAT GPT - Modulo 3, 4 & 5
def run_gpt(prompt:str):
    try:
        client = OpenAI(
            api_key=get_key('dev/.env',"OPENAI_API_KEY"),
        )

        response = client.chat.completions.create(
            model="gpt-4o-mini-2024-07-18",
            messages=[
                {"role": "system", 
                "content": f"Eres un asistente virtual llamado {name} que habla en verso y responde de manera cortez, clara y objetiva, es decir, resumes la informaci√≥n solicitada por el usuario."},
                {"role": "user", 
                "content": prompt}
            ]
        )
        return response.choices[0].message.content

    except Exception as err:
        print(err_template+str(err))
# *FINAL CHAT GPT

#* Enviar mensajes de whatapp
# pywhatkit sirve para enviar mensajes de WhatsApp: Utilice la funci√≥n pywhatkit.sendwhatmsg() para enviar mensajes de WhatsApp a cualquier n√∫mero de WhatsApp en un momento determinado. La sintaxis es la siguiente: pywhatkit.sendwhatmsg("n√∫mero de m√≥vil del receptor", "mensaje", horas, minutos). Aseg√∫rese de que el n√∫mero de m√≥vil del receptor est√© en formato de cadena y el c√≥digo del pa√≠s se mencione antes del n√∫mero de m√≥vil. Las horas siguen el formato de 24 horas. Los minutos son los minutos de la hora programada para el mensaje (00-59). Por ejemplo, para enviar un mensaje a un n√∫mero de WhatsApp a las 22:28, utilice la siguiente sintaxis: pywhatkit.sendwhatmsg("+91xxxxxxxxxx", "Hola desde Python", 22, 28)

#* M√≥dulo 4 - realizaci√≥n de acciones seg√∫n palabras claves de activaci√≥n
def run(text:str = '', status=True):
    if text == '':
        text = listen()
        if text['status'] == False:
            # print('no hay nombre de asistente')
            return {'text':text, 'status':status}
    else:
        text = {'text':text, 'status':status}

    # text = {'text': 'Hola, ¬øc√≥mo est√°s?'}

    # Utilizamos match para evaluar el texto
    match text['text']:
        case _ if 'reproduce' in text['text']:
            # print('REPRODUCE')
            music = text['text'].replace('reproduce', '')
            music = music.replace(name, '')
            pywhatkit.playonyt(music)
            print(va_template + 'Reproduciendo' + music)
            # print(f'{Data_transfer.negrita}{name}: {Data_transfer.normal_color}Reproduciendo ' + music)
            talk('Reproduciendo ' + music)
            return {'text' : text['text'], 'status' : True}
        case _ if 'busca' in text['text']:
            busqueda = text['text'].replace('busca', '')
            # print('Texto con nombre omitido: ' + text)
            talk('Buscando ' + busqueda)
            pywhatkit.search(busqueda)
            # Esta funcion busca en el motor de busqueda google.com, valga la redundancia
            print(f"{va_template}Buscando {busqueda}")
            return {'text' : text['text'], 'status' : True}
        case _ if 'informaci√≥n sobre' in text['text']:
            # print('INFORMACION SOBRE')
            # wikipedia.set_lang = 'es'
            wikipedia.set_lang(wiki_lang)
            
            info = text['text'].replace('informaci√≥n sobre', '')
            info = text['text'].replace('dame', '')
            info = text['text'].replace('dime', '')
            info = text['text'].replace('ofreceme', '')
            info = text['text'].replace('ofr√©ceme', '')

            resumen = wikipedia.summary(info)
            print(va_template + resumen)
            talk(resumen)
            return {'text' : text['text'], 'status' : True}
        case _ if 'recu√©rdame' in text['text']:
            import time
            tarea_inicio = text['text'].find("Recu√©rdame") + len("Recu√©rdame")
            match = re.search(r'\b(en|despu√©s de)\b', text['text'])
            if match:
                tarea_fin = match.start()            
                tarea = text['text'][tarea_inicio:tarea_fin].strip()
                tiempo_inicio = match.end()
                tiempo_texto = text['text'][tiempo_inicio:].strip().split()[0]
                comando = int(tiempo_texto)
                if "segundo" or "segundos" in tiempo_texto:
                    comando = comando
                elif "minuto" or "minutos" in tiempo_texto:
                    comando = comando * 60
                elif "hora" or "horas" in tiempo_texto:
                    comando = comando * 3600
                elif "d√≠a" or "d√≠as" in tiempo_texto:
                    comando = comando * 86400
                talk(f"¬°Tarea programada! Te recordar√© que debes {tarea} en el tiempo estimado")
                time.sleep(comando)
                print(f"Recuerda que {tarea}")
                talk(f"Recuerda que {tarea}")
            else:
                talk("No se encontr√≥ la unidad de tiempo. Por favor intente de nuevo")
            # return True
            return {'text' : text['text'], 'status' : True}
        case _ if 'chiste' in text['text']:
            chiste = pyjokes.get_joke(wiki_lang)
            print(va_template + chiste)
            talk(chiste)
            # tts(chiste)
            # windound no soporta formato mp3
            playsound('sounds/redoble_de_tambores.wav')
            # os.system("aplay sounds/redoble_de_tambores.wav")
            return {'text' : text['text'], 'status' : True}
        case _ if 'realiza' in text['text'] and 'reporte' in text['text']:
            print('Creando reporte')
            talk('Creando reporte')
            create_report()
            return {'text' : text['text'], 'status' : True}
        case _ if 'qu√© hora es' in text['text']:
            time = datetime.datetime.now().strftime(time_format[slice(0,5)])
            time_es = datetime.datetime.now().strftime(time_format)
            if(time.startswith('0')):
                time = time[slice(1,(time.__len__()+1))]
                time_es = time_es[slice(1,(time.__len__()+1))]

            changeShape = random.randint(0,2)
            if(changeShape == 0):
                print(va_template + f"Son las {time}")
                talk(f"Son las {time}")

            elif(changeShape == 1):
                if(datetime.datetime.now().strftime('%p') == 'PM'):
                    print(va_template + f"Son las {time} de la tarde")
                    talk(f"Son las {time} de la tarde")
                else:
                    print(va_template + f"Son las {time} de la ma√±ana")
                    talk(f"Son las {time} de la ma√±ana")
            else:
                print(va_template + f"Son las {time_es}")
                talk(f"Son las {time_es}")
            return {'text' : text['text'], 'status' : True}
        case _ if 'temporizador' in text['text']:
            import time
            wait = 0
            _, timer = text['text'].split('de')

            hour = re.findall(r"\d+\s*[h]{1,5}",timer)
            minute = re.findall(r"\d+\s*[m]{1,7}",timer)
            seconds = re.findall(r"\d+\s*[s]{1,8}",timer)

            hour = int(hour[0].replace('h','')) if len(hour) > 0 else 0
            minute = int(minute[0].replace('m','')) if len(minute) > 0 else 0
            seconds = int(seconds[0].replace('s','')) if len(seconds) > 0 else 0

            wait = (hour*3600) + (minute*60) + seconds

            print(f'Temporizador fijado para {wait} segundos...')
            talk(f'Temporizador fijado para {wait} segundos...')
            
            async def async_sleep(time_to_wait:int) -> None:
                await asyncio.sleep(time_to_wait)

                print(f'Terminado!')
                talk(f'Terminado!')

                for i in range(2):
                    # winsound.PlaySound('sounds/redoble_de_tambores.wav', winsound.SND_FILENAME)
                    playsound('sounds/redoble_de_tambores.wav')
            
            print('Antes de invocaci√≥n de funcion as√≠ncrona')        
            asyncio.run(async_sleep(wait))
            print('despues de invocaci√≥n de funcion as√≠ncrona')        
            return {'text' : text['text'], 'status' : True}
        case _ if 'que dia fue' in text['text'] or 'qu√© d√≠a fue' in text['text']:
            # print('QUE DIA FUE')
            date = getDaysAgo(text['text'])
            print(date)
            talk(date)
            return {'text' : text['text'], 'status' : True}
        case _ if 'est√°s ah√≠' in text['text']:
            print(va_template + 'S√≠, ¬øEn qu√© te puedo ayudar?')
            talk('S√≠, ¬øEn qu√© te puedo ayudar?')
            text = name + ' ' + listen()
            return {'text' : text['text'], 'status' : True}
        case _ if 'c√≥mo te llamas' in text['text']:
            print(name)
            talk('Soy' + name + '¬øC√≥mo te puedo ayudar?')
            # text = listen()
            return {'text' : text['text'], 'status' : True}
        case _ if 'mu√©strame el archivo de configuraci√≥n' in text['text'] or 'muestrame el archivo de configuraci√≥n' in text['text']:
            print('Mostrando el contenido del archivo de configuraci√≥n')
            talk('Mostrando el contenido del archivo de configuraci√≥n')

            print('Nombre del asistente: ' + name)
            print('Idioma: ' + lang)
            print('Idioma de wikipedia: ' + wiki_lang)
            print('Formato de hora: ' + '12' if time_format.startswith('%I') else '24' + 'horas')
            print('Indice de voz: ' + voice)

            talk('Nombre del asistente: ' + name)
            talk('Idioma: ' + lang)
            talk('Idioma de wikipedia: ' + wiki_lang)
            talk('Formato de hora: ' + '12' if time_format.startswith('%I') else '24' + 'horas')
            talk('Indice de voz: ' + voice)
            return {'text' : text['text'], 'status' : True}
        case _ if 'crea una nueva configuraci√≥n' in text['text']:
            talk('Creando archivo de configuraci√≥n nuevamente')
            Data_transfer.initial_config()
            load_data(Data_transfer.readfile().values())
            return {'text' : text['text'], 'status' : True}
        case _ if 'hasta luego' in text['text']:
            talk(f'Hasta pronto')
            sys.exit(0)
            return {'text' : text['text'], 'status' : True}
            # Aqu√≠ deberia ir un c√≥digo para poner el asistente en modo de siempre escucha y contestar si se menciona el nombre del asistente
        case _ if 'enciende' in text['text']:
            from wakeonlan import send_magic_packet
            machine = text['text'].replace('enciende', '').replace('la', '').replace('ps', 'pc').replace('computadora', 'pc')

            class MacNotFoundError(Exception):
                # """Excepci√≥n personalizada para indicar que no se encontr√≥ la direcci√≥n MAC."""
                pass
            # Enviar un paquete m√°gico a una direcci√≥n MAC espec√≠fica
            # send_magic_packet('00:11:22:33:44:55')
            # send_magic_packet('00:11:22:33:44:55', '66:77:88:99:AA:BB')
            # send_magic_packet('00:11:22:33:44:55', ip_address='192.168.1.255', port=7)
            try:
                if 'todas' in machine:
                    for mac in Data_transfer.readfile(txt_path+'/wol.txt').values():
                        # print(mac)
                        send_magic_packet(mac)
                else:
                    if machine.split()[1].isdigit():
                        machine = machine.split()[0]+str(machine.split()[1])
                    else:
                        index = Data_transfer.letras_a_numero(machine.split()[1])
                        if index == False:
                            raise MacNotFoundError(f"No se encontr√≥ la direcci√≥n MAC para {machine.strip()}.")
                        machine = machine.split()[0]+str(index)
                    # print('Mac: ' + Data_transfer.read_config_file_line(machine, txt_path+'/wol.txt'))
                    send_magic_packet(Data_transfer.read_config_file_line(machine, txt_path+'/wol.txt'))
                print(va_template + "Echo ‚úÖ")
                talk('Listo')
            except ValueError as err:
                print(f"{err_template}{err}")
            except MacNotFoundError as err:
                print(err_template + str(err))
                talk(str(err))
        case _:
            return {'text' : text['text'], 'status' : False}

#* EJECUCI√ìN DE ACCIONES - con control de excepciones
try:
    #* Implementando funcionalidad para que el asistente se mantenga escuchando
    # run('texto de prueba escrito')
    # run('enciende la pc uno')
    # run()

    while True:
        result = run()

        if not result['status']:
            ia = run_gpt(result['text'])
            print(va_template + str(ia))
            talk(ia)

except KeyboardInterrupt:
    no_talk()
    print(err_template + 'Acci√≥n cancelada por el usuario.')
except NameError as err:
    print(err)
    print("Entrada de audio inv√°lida, intentalo nuevamente")
    talk("Entrada de audio inv√°lida, intentalo nuevamente")
except TypeError as err:
    print(err)
    # talk("Entrada de audio inv√°lida, intentalo nuevamente")
    # print("Entrada de audio inv√°lida, intentalo nuevamente")
    pass


print(f'{Data_transfer.yellow_color}PROGRAMA FINALIZADO CON UNA DURACI√ìN DE:{Data_transfer.bright_cyan_color}{Data_transfer.negrita} {int(time.time() - start_time)} segundos {Data_transfer.normal_color}')