# Dato curioso a fecha de hoy 5/marzo/2024 3:27 hora dominicana hay un total de 529 lineas de c√≥digo en va.py, hay 265 lineas de c√≥digo y otras 264 de c√≥mentarios aproximadamente (los espacios en blanco se contaron como lineas de c√≥digo).
# ESTRUCTURA Y REPARTICION DE TRABAJO DEL ASISTENTE
# *     Jared y Jairon
#todo 1 - Grabar voz del usuario üé§
#todo 2 - Convertir lo que dijo en texto üñã
# 
# *     Xaviel e Ismael
#todo 3 - Procesar la intenci√≥n del usuario ‚ùì (modelo de IA)
#todo 4 - Ejecutar la acci√≥n deseada üë®‚Äçüè≠
#
# ?      Proximamente
#todo 5 - Preparar respuesta (en texto) üí¨
#todo 6 - Convertir en audio y reproducir ü¶ª

#* Comprobar conectividad del usuario
from transfer_data import Transaction # M√≥dulo local para sustituir a config y readfile, ademas, a√±ade nuevos m√©todos
import os # M√≥dulo para administrar cosas afines al sistema operativo (rutas, cierre de programas, etc.)

# Instanciar clase Transaction
Data_transfer = Transaction()

if Data_transfer.check_internet_connection():
    continue
else:
    os._exit()

# Importaciones 
import speech_recognition as sr # M√≥dulo para reconocer audio y convertir a texto (STT)
import pyttsx3 # M√≥dulo para convertir de texto a audio (TTS)
from dotenv import load_dotenv # M√≥dulo para cargar api-key en archivo .env
import datetime # M√≥dulo para manejar la hora
import pywhatkit # M√≥dulo para enviar mensajes de whatapp y abrir contenido en youtube (es un kit)
import random #Nuevo m√≥dulo para generar n√∫meros aleatorios
import wikipedia #Nuevo modulo para resumir articulos de wikipedia
import winsound #Nuevo modulo para reproducir sonido, (no es necesario instalar con pip)
# import urllib.request #Nuevo modulo para conteo de suscriptores
import pyjokes # M√≥dulo para chistes
# import spoty # M√≥dulo para reproducir contenido en spotify (no esta en uso actualmente)
# from sys import exit #Para trabajar con sys.exit() en caso de ser necesario
from banner import figlet_banner # Nuevo m√≥dulo local para imprimir banner de los desarrolladores
#* Open AI - Chat Gpt
from openai import OpenAI # M√≥dulo para inteligencia artificial
# from audio import tts
# Google - Gemini
# import pathlib
# import textwrap

# import google.generativeai as genai

# Used to securely store your API key
# from google.colab import userdata

# from IPython.display import display
# from IPython.display import Markdown


# def to_markdown(text):
#     text = text.replace('‚Ä¢', '  *')
#     return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

#* Default const
# name = 'jarvis' # Nombre por el que se llamara al asistente (para desarrollar m√°s tarde)
# lang = 'es-ES'
# time_format = "%I:%M:%p"
# wiki_lang = 'es'

#* Obtener constantes del archivo config.text
# Esto se hace mas adelante en el c√≥dgio

#* Default const - open AI mode#
#  assistant_role: "Eres un asistente virtual que habla en verso y responde de manera cortez."
# prompt = "Dime de manera detallada como puedo crear una funci√≥n en python."

#* Color templates
# green_color = "\033[92m"
# cian_color = "\033[96m"
# blue_color = "\033[94m"
# yellow_color = "\033[93m"
# red_color = "\033[91m"
# negrita = "\033[1m"
# subrayado = "\033[4m"
# normal_color = "\033[0m"

green_color = Data_transfer.green_color
cian_color = Data_transfer.cian_color
blue_color = Data_transfer.blue_color
yellow_color = Data_transfer.yellow_color
red_color = Data_transfer.red_color
negrita = Data_transfer.negrita
subrayado = Data_transfer.subrayado
normal_color = Data_transfer.normal_color

#* text templates
user_template = f"{negrita}Usuario: {normal_color}"
# va_template = f"{negrita}{name}: {normal_color}" #Declarada m√°s abajo
err_template = f"{red_color}{negrita}ERROR: {normal_color}"
warning_template = f"{yellow_color}{negrita}ADVERTENCIA: {normal_color}"


#* De texto a voz - Modulo 6
engine = pyttsx3.init()

try:
    # global voice
    voice_id = 0

    # if voice != None:
    #     voice_id = voice

    voices = engine.getProperty('voices')
    engine.setProperty('voice', voices[voice_id].id)
except IndexError:
    print(f"No existe la voz con el ID {voice_id}, asegurese de tener ingles, espa√±ol de espa√±a y espa√±ol de mexico instalado en su windows")
    print(f"{err_template}en configuraci√≥n de idiomas")

    for voice in voices:
        print(f'{yellow_color} = = = = = = = =  = = = = = = {normal_color}')
        print(f'ID:{cian_color} {voice.id} {normal_color}')
        print(f'Name:{cian_color} {voice.name} {normal_color}')
        # print(f'Languages:{cian_color} {voice.languages} {normal_color}')
        # print(f'Age:{cian_color} {voice.age} {normal_color}')
        # print(f'Gender:{cian_color} {voice.gender} {normal_color}')

    #! No utilizar el exit() para programas reales, lo mejor seria utilizar el sys.exit()
    exit()
    # sys.exit()

# for voice in voices:
#     print(voice)
figlet_banner(text='USAR API CON PRUDENCIA', banner_index=3)

#* Funci√≥n para hablar, recibe el texto a reproducir como parametro
def talk(text):
    engine.say(text)
    engine.runAndWait()

#* Funci√≥n para detener el habla en caso de ser necesario
def no_talk():
    engine.stop()
# talk("Hola, ¬øcomo estas?")


#* De voz a texto - Modulo 1 & 2
rec = sr.Recognizer()

# Ajuste del umbral de audio (En t√©rminos simples, si la energ√≠a (volumen) de la se√±al de audio es mayor que el umbral, el sistema considera que est√° recibiendo voz. Si la energ√≠a es menor que el umbral, el sistema considera que no hay voz y que cualquier sonido que est√© recibiendo es simplemente ruido)

# 2300 tiene problemas para entender
# rec.energy_threshold = 2900
#* Funci√≥n para escuchar la petici√≥n del usuario, se puede invocar durante la ejecuci√≥n del programa, lo que permite que el asistente pueda volver a escuchar en cualquier punto del programa con solo invocar la funci√≥n
def listen():
    # Acceder al microfono del dispositivo
    try:
        # print(text)
        with sr.Microphone() as source:
            try:
                text = ''
                status = False

                print(f"{green_color}Escuchando... {normal_color}")

                winsound.PlaySound('sounds/sonido_apertura.wav', winsound.SND_FILENAME)
                # rec.adjust_for_ambient_noise(source,duration=1) #Ajustar para ruido de fondo, toma una muestra de 1 segundo para el ruido de fondo
                audio = rec.listen(source)

                #? Linea alternativa si el asistente escucha indefinidamente
                # audio = rec.listen(source, timeout = 2, phrase_time_limit = 4)

                print(f"{blue_color}Analizando... {normal_color}")
                text = rec.recognize_google(audio, language = lang).lower()
                # print("Texto: " + text)

                winsound.PlaySound('sounds/sonido_cierre.wav', winsound.SND_FILENAME | winsound.SND_ASYNC)
                print(user_template + text)

                if name in text:
                    text = text.replace(name, '')
                    # print('Texto con nombre omitido: ' + text)
                    status = True

                # prompt = text
                # talk(text)
                # return text
                return {'text': text, 'status': status}
                
            except sr.WaitTimeoutError:
                print(err_template + 'No se detecto entrada de audio.')
                # return False
            except sr.UnknownValueError:
                print(err_template + 'Google Speech Recognition no pudo entender el audio.')
                talk('No he podido entender eso, intentemoslo nuevamente')
                listen()
            except sr.RequestError as e:
                print(err_template + f"No se pudo solicitar resultados de Google Speech Recognition; {0}".format(e))
                # return False
            except TypeError:
                print(err_template + 'Variable aun sin datos')
                # return False
            except KeyboardInterrupt:
                print(err_template + 'Acci√≥n cancelada por el usuario.')
                # return False
            winsound.PlaySound('sounds/Sonido_Cierre.wav', winsound.SND_FILENAME | winsound.SND_ASYNC)

    except KeyboardInterrupt:
        print(err_template + 'Acci√≥n cancelada por el usuario.')
        # return False
    except TypeError:
        print(err_template + 'Variable aun sin datos')
        # return False
    except:
        print(err_template + 'No hay microfono seleccionado')
        talk('No se encontro microfono, por favor, configure el dispositivo de entrada')
        # return False


#* IMPORTACI√ìN DE FUNCIONES DE ARCHIVOS EXTERNOS
# figlet_banner()

try:
    #* Funci√≥n para cargar los datos de archivo de configuraci√≥n en las variables de asistente
    def load_data(data_to_extract):
        global name, lang, wiki_lang, time_format, voice
        # config_name, config_lang, time_format, voice = data_to_extract

        # name = config_name
        # lang = config_lang
        # wiki_lang = config_lang[slice(0,2)]

        # print('Nombre: ' + name)
        # print('Idioma: ' + lang)
        # print('Idioma de wikipedia: ' + wiki_lang)
        # print('Formato de hora: ' + time_format)
        # print('Indice de voz: ' + voice)

        # print('===========================')
        name, lang, time_format, voice = data_to_extract
        wiki_lang = lang[slice(0,2)]

        # print('Nombre: ' + name)
        # print('Idioma: ' + lang)
        # print('Idioma de wikipedia: ' + wiki_lang)
        # print('Formato de hora: ' + time_format)
        # print('Indice de voz: ' + voice)

    #* Ejecutar funci√≥n que lee archivo de configuraci√≥n
    data = Data_transfer.readfile()
    if type(data) != dict or not Data_transfer.check_file_integrity():
        # print(err_template+'Archivos de configuraci√≥n corruptos')
        (err_template+'Datos de configuraci√≥n corruptos o inexistentes')
        talk('Error en datos de configuraci√≥n, por favor restablezca el archivo.')
        Data_transfer.initial_config()

        data = Data_transfer.readfile()
        load_data(data.values())
    else:
        load_data(data.values())
except KeyboardInterrupt:
    print(f'\n{warning_template}Acci√≥n cancelada por el usuario.')


#* Funci√≥n para crear archivo de configuraci√≥n (config.txt) mediante la voz (no se usa aun)
def init_configuration():
    try:
        response:str = listen()

        if('s√≠' in response or 'si' in response):
            print('Entro en si en respuesta')
            Data_transfer.create_config_file()
            Data_transfer.initial_config()

        else:
            print('Entro en no en respuesta')
            print('Archivo de configuraci√≥n no creado a petici√≥n de usuario, continuando con ejecuci√≥n')
            print('Cargando valores por defecto...')

            name = 'va'
            lang = 'es-ES'
            time_format = "%I:%M %p"
            wiki_lang = 'es'
            voice_number = 0

            talk('Esta bien, continuando con la ejecuci√≥n')
    except:
        print('Audio no reconocido')
        talk('No pude entender lo que has dicho, ¬øTe importaria repetirlo?')
        init_configuration()

# init_configuration()

#* Templates 2 - variable faltante, es necesario colocarla aqu√≠ luego de que se tiene el valor de "name"
va_template = f"{negrita}{name}: {normal_color}"

#* Ejecutar la funci√≥n para escuchar al usuario y almacenar resultado en variable text para su futura evaluaci√≥n
text = listen()
# text = {'text' : 'env√≠a Hola ¬øc√≥mo estas? a raylin', 'status': True}

# print(Transaction)
# print(type(Transaction))

#* PARTE DE Ismael Y Xaviel - con open AI - m√≥dulo 3
# Cargar las variables de entorno (variables contenidas en archivos .env)
load_dotenv()

# Almanecar variable de entorno en una variable de python con dotenv
# open_ai_api = os.getenv('OPENAI_API_KEY')
# print(open_ai_api)

# Variables de entorno

#* Chat GPT

# *INICIO CHAT GPT - Modulo 3, 4 & 5
#* Este primer bloque se utiliza para interacciones con usuario
def run_gpt():
    try:
        client = OpenAI(
            api_key=os.environ.get("OPENAI_API_KEY"),
        )
        # exprint(client.api_key)

        # chat_completion = client.chat.completions.create(
        #     messages=[
        #         {"role": "system", 
        #         "content": "Eres un asistente virtual que habla en verso y responde de manera cortez, clara y objetiva."},
        #         {"role": "user", 
        #         "content": text}
        #     ],
        #     model="gpt-3.5-turbo",
        # )

        response = client.chat.completions.create(
            model="gpt-3.5-turbo-0125",
            messages=[
                {
                    "role": "user",
                    "content": text['text'],
                }
            ]
        )
        # print(response.headers.get("X-My-Header"))
        
        # print('response')

        # print(response.choices[0].message.role)
        print(response.choices[0].message.content)
        return response.choices[0].message.content
        
        # print(response.choices[0].message.content)
        # print(response.choices)
        # for line in response.iter_lines():
        #     print(line)

    except Exception as err:
        print('err')
        print(err)

# run_gpt()

#* Este segundo bloque se utiliza para interpretaci√≥n y ejecuci√≥n de peticiones de usuario (se ejecuta por detras) (No se usa aun)

# try:
#     completion = client.chat.completions.create(
#     model="gpt-3.5-turbo",
#     messages=[
#         {"role": "system", "content": "Eres un asistente virtual que interpreta las intenci√≥nes del usuario y las clasifica de manera objetiva sin aunar descripci√≥n para ser posteriormente procesado y ejecutado lo que el usuario quiere realizar"},
#         {"role": "user", "content": "¬øCu√°l es la intenci√≥n del usuario segun este prompt?: " + prompt}
#     ])
#     intencion = completion.choices[0].message
#     print(intencion)
# except Exception as err:
#     print(err)
# *FINAL CHAT GPT

#* Enviar mensajes de whatapp
# pywhatkit sirve para enviar mensajes de WhatsApp: Utilice la funci√≥n pywhatkit.sendwhatmsg() para enviar mensajes de WhatsApp a cualquier n√∫mero de WhatsApp en un momento determinado. La sintaxis es la siguiente: pywhatkit.sendwhatmsg("n√∫mero de m√≥vil del receptor", "mensaje", horas, minutos). Aseg√∫rese de que el n√∫mero de m√≥vil del receptor est√© en formato de cadena y el c√≥digo del pa√≠s se mencione antes del n√∫mero de m√≥vil. Las horas siguen el formato de 24 horas. Los minutos son los minutos de la hora programada para el mensaje (00-59). Por ejemplo, para enviar un mensaje a un n√∫mero de WhatsApp a las 22:28, utilice la siguiente sintaxis: pywhatkit.sendwhatmsg("+91xxxxxxxxxx", "Hola desde Mi Diario Python", 22, 28)

# print(text)
# print(text['text'])
# print(text['status'])

#* M√≥dulo 4 - realizaci√≥n de acciones seg√∫n palabras claves de activaci√≥n
def run():
    global text
    if 'reproduce' in text['text']:
        if 'spotify' in text['text']:
            music = text['text'].replace('reproduce', '')
            music = music.replace('jarvis', '')
            music = music.replace('spotify', '')
            talk('Reproduciendo ' + music)
            spoty.play(keys["spoty_client_id"], keys["spoty_client_secret"], music)
        else:
            music = text['text'].replace('reproduce', '')
            music = music.replace('jarvis', '')
            pywhatkit.playonyt(music)
            talk('Reproduciendo ' + music)
            # print(f'{negrita}{name}: {normal_color}Reproduciendo ' + music)
            print(va_template + 'Reproduciendo' + music)
        return True

    elif 'busca' in text['text']:
        busqueda = text['text'].replace('busca', '')
        # print('Texto con nombre omitido: ' + text)
        talk('Buscando ' + busqueda)
        pywhatkit.search(busqueda)
        # Esta funcion busca en el motor de busqueda google.com, valga la redundancia
        print(f"{va_template}Buscando {busqueda}")
        return True

    elif 'informaci√≥n sobre' in text['text'] and 'ingles' in text['text']:

        info = text['text'].replace('informaci√≥n sobre', '')
        info = text['text'].replace('en', '')
        info = text['text'].replace('dame', '')
        info = text['text'].replace('dime', '')
        info = text['text'].replace('ofreceme', '')
        info = text['text'].replace('ofr√©ceme', '')

        # print('Texto con nombre omitido: ' + text)
        talk('Resumiendo informacion sobre ' + info + ' en wikipedia')
        talk(pywhatkit.info(info))
        # Esta funcion unicamente devuelve resumen en la consola (no puedo almacenar el resumen en variable), y lo devuelve en ingles, para almacenar el resumen y poder cambiar el idioma necesito utilizar el modulo de wikipedia (ejemplo mostrado arriba), que es el mismo modulo que utiliza pywhatkit internamente.
        print(f"{va_template}resumiendo {info} en wikipedia en ingles")
        return True
    
    elif 'informaci√≥n sobre' in text['text']:
        # wikipedia.set_lang = 'es'
        wikipedia.set_lang(wiki_lang)
        
        info = text['text'].replace('informaci√≥n sobre', '')
        info = text['text'].replace('dame', '')
        info = text['text'].replace('dime', '')
        info = text['text'].replace('ofreceme', '')
        info = text['text'].replace('ofr√©ceme', '')

        resumen = wikipedia.summary(info)
        print(va_template + resumen)
        talk(resumen)
        return True

# * Diferencia entre search e info
# search: La funci√≥n pywhatkit.search("Palabra clave") abre tu navegador predeterminado y realiza una b√∫squeda en Google con la ‚ÄúPalabra clave‚Äù que proporcionaste. Te mostrar√° todos los resultados de b√∫squeda relacionados con esa palabra clave en Google.

# info: Por otro lado, la funci√≥n pywhatkit.info("Tema") te proporciona una breve informaci√≥n sobre el ‚ÄúTema‚Äù que proporcionaste. Esta funci√≥n utiliza la biblioteca wikipedia para buscar el tema y devuelve un resumen del art√≠culo de Wikipedia correspondiente.

# Por lo tanto, la principal diferencia es que search realiza una b√∫squeda en Google e info proporciona un resumen de un art√≠culo de Wikipedia.

    elif 'chiste' in text['text']:
        chiste = pyjokes.get_joke(wiki_lang)
        print(va_template + chiste)
        talk(chiste)
        # tts(chiste)
        winsound.PlaySound('sounds/redoble_de_tambores.wav', winsound.SND_FILENAME)
        return True


    elif 'env√≠a' in text['text']:
        text = text['text'].replace('env√≠a', '')

        #! EJEMPLO DE LO QUE SE ESPERA COMO ENTRADA "ENVIAR MENSAJE A DANIEL", ELIMINAR LA FRASE ENVIAR O ENVIA Y TOMAR LA VOCAL "A" COMO SEPARADOR, LO QUE ESTA DESPUES DE LA "A" SERA EL CONTACTO A QUIEN SE LE ENVIARA QUE SE DEBERA BUSCAR EN EL ARCHIVO CONTACTS.TXT Y LO QUE ESTA ANTES DE "A" Y DESPUES DE "ENVIA" O "ENVIAR" SERA EL MENSAJE.

        # "Esto es un mensaje de prueba desde python"

        #* Modulo para obtener el tiempo actual y sumarle 10 segundos para la funcion de enviar mensaje por whatapp
        # Obt√©n la hora actual
        hora_actual = datetime.datetime.now()

        # Imprime la hora actual en formato de 24 horas
        # print("Hora actual: ", hora_actual)
        # print("Hora actual: ", hora_actual.strftime("%H:%M:%S"))

        # Suma 1 minuto a la hora actual
        #* minuto_extra = datetime.timedelta(minutes=1)
        nueva_hora = hora_actual + datetime.timedelta(minutes=1)
        # nueva_hora = datetime.datetime.strftime(nueva_hora, "%H:%M")

        # print(nueva_hora.strftime("%I,%M")) Esto funciona
        # Imprime la nueva hora en formato de 24 horas
        # print("Nueva hora: ", nueva_hora.strftime("%H:%M:%S"))
        # nueva_hora_formateada = nueva_hora.strftime(str(int("%H")) , str(int("%M")+1))
        # print("Nueva hora: ", nueva_hora.strftime("%H:%M"))

        # print("Nueva horaH: ", nueva_hora.strftime("%H"))
        # print("Nueva horaM: ", nueva_hora.strftime("%M"))
        # print("Nueva horaM: ", nueva_hora.strftime("%S"))
        # print("Nueva hora: ", nueva_hora.strftime(str("%H")+ ',' +str("%M") + ',' + str("%S")))

        #* print(hora_actual.strftime("%I:%M"))
        #* print(nueva_hora.strftime("%I:%M"))
        # print(nueva_hora_formateada)
        try:
            msg, contact = text.split(' a ')
            # print('Mensaje ' + msg)
            # print('contacto ' + contact)

            contact = Data_transfer.read_phone_numbers(contact)

            #? talk(f"El mensaje se enviara en unos segundos")
            talk(f"El mensaje se enviara en unos segundos")
            # print(contact, msg, nueva_hora.hour, nueva_hora.minute, 15, True, 3)

            # pywhatkit.sendwhatmsg(contact, msg, nueva_hora.hour, nueva_hora.minute, 15, True, 3)
            pywhatkit.sendwhatmsg('+18574928689', msg, nueva_hora.hour, nueva_hora.minute, 3, True, 5)
            talk(f"Mensaje enviado al n√∫mero seleccionado")
            print(va_template + "Mensaje enviado al n√∫mero seleccionado")
        except:
            print(err_template + "en el env√≠o de mensaje, por favor, vuelve a intentarlo.")
            talk("Error en el env√≠o de mensaje, por favor, vuelve a intentarlo.")
        # pywhatkit.sendwhatmsg("numero con prefijo","mensaje", 23,57)
        return True


    elif 'qu√© hora es' in text['text']:
        # print(f"Son las {datetime.datetime.now().strftime("%I:%M")}")
        # talk(f"Son las {datetime.datetime.now().strftime("%I:%M")}")

        # time = datetime.datetime.now().strftime("%I:%M")
        time = datetime.datetime.now().strftime(time_format[slice(0,5)])
        # time_es = datetime.datetime.now().strftime("%I:%M:%p")
        time_es = datetime.datetime.now().strftime(time_format)
        
        # print(time)
        # print(time_es)

        if(time.startswith('0')):
            time = time[slice(1,(time.__len__()+1))]
            time_es = time_es[slice(1,(time.__len__()+1))]
            # print('Ajustado: '+ time)
            # print('Ajustado: '+ time_es)

        changeShape = random.randint(0,2)
        # print(changeShape)

        if(changeShape == 0):
            print(va_template + f"Son las {time}")
            talk(f"Son las {time}")

        elif(changeShape == 1):
            if(datetime.datetime.now().strftime('%p') == 'PM'):
                print(va_template + f"Son las {time} de la tarde")
                talk(f"Son las {time} de la tarde")
            else:
                print(va_template + f"Son las {time} de la ma√±ana")
                talk(f"Son las {time} de la ma√±ana")
        else:
            print(va_template + f"Son las {time_es}")
            talk(f"Son las {time_es}")
        return True


    #! IMPORTANTE
    #* Con global le indico que la variable text sera global en lugar de local, como la variable text existe, entonces estoy indicando que quiero utilizar la variable global y no crear una variable nueva dentro de la funci√≥n, esto deberia solucionar el error de "UnboundLocalError" 
    # global text
    elif 'est√°s ah√≠' in text['text']:
        print(True)
        print(va_template + 'S√≠, ¬øEn qu√© te puedo ayudar?')
        talk('S√≠, ¬øEn qu√© te puedo ayudar?')
        text = name + ' ' + listen()
        return True


    # global text
    elif 'c√≥mo te llamas' in text['text']:
        print(name)
        talk('Soy' + name + '¬øC√≥mo te puedo ayudar?')
        # text = listen()
        return True

    elif 'muestrame el archivo de configuraci√≥n' in text['text'] or 'mu√©strame el archivo de configuraci√≥n' in text['text']:
        print('Mostrando el contenido del archivo de configuraci√≥n')
        talk('Mostrando el contenido del archivo de configuraci√≥n')

        print('Nombre del asistente: ' + name)
        print('Idioma: ' + lang)
        print('Idioma de wikipedia: ' + wiki_lang)
        print('Formato de hora: ' + '12' if time_format.startswith('%I') else '24' + 'horas')
        print('Indice de voz: ' + voice)

        talk('Nombre del asistente: ' + name)
        talk('Idioma: ' + lang)
        talk('Idioma de wikipedia: ' + wiki_lang)
        talk('Formato de hora: ' + '12' if time_format.startswith('%I') else '24' + 'horas')
        talk('Indice de voz: ' + voice)
        return True
        
    
    elif 'crea una nueva configuraci√≥n' in text['text'] :
        talk('Creando archivo de configuraci√≥n nuevamente')
        Data_transfer.initial_config()
        load_data(Data_transfer.readfile().values())
        return True


    elif 'hasta luego' in text['text']:
        talk(f'Hasta pronto')
        os._exit(0)
        return True


    # elif 'cu√°ntos suscriptores tiene' in text or 'cuantos suscriptores tiene' in text:
    #     key = os.getenv('GOOGLE_API_KEY_YOUTUBE')
    #     name_subs = text.replace('cuantos suscriptores tiene', '')
    #     data = urllib.request.urlopen(f'https://www.googleapis.com/youtube/v3/channels?part=statistics&forUsername={name_subs.strip()}&key={key}').read()
    #     subs = json.loads(data)["items"][0]["statistics"]["subscriberCount"]
    #     talk(name_subs + " tiene +{:,d}".format(int(subs)) + "suscriptores!")


# print('Nombre asistente: '+name)
# print('Texto: '+text)}# print(name in text)
#* Ejecutar funciones que ejecutan acciones a peticion
# try:
#     if(name in text):
#         try:
#             finish()
#             run()
#             search()
#             info()
#             send()
#             time()
#             disponibilidad()
#             who_i_am()
#         except NameError as err:
#             print("Entrada de audio inv√°lida, intentalo nuevamente")
#             talk("Entrada de audio inv√°lida, intentalo nuevamente")
#             print(err)
#         except KeyboardInterrupt:
#             print(err_template + 'Acci√≥n cancelada por el usuario.')
# except TypeError:
#     pass

#* EJECUCI√ìN DE ACCIONES - con control de excepciones
try:
    print('Si quiere usar inteligencia artificial, por favor, descomenta la linea 624, recuerda utilizar la API con prudencia puesto que supone un costo cada petici√≥n')
    run()
    # if not run():
    #     talk(run_gpt())

except NameError as err:
    print("Entrada de audio inv√°lida, intentalo nuevamente")
    # talk("Entrada de audio inv√°lida, intentalo nuevamente")
    # print(err)
except KeyboardInterrupt:
    print(err_template + 'Acci√≥n cancelada por el usuario.')
except TypeError:
    print("Entrada de audio inv√°lida, intentalo nuevamente")



#! LINEA TEMPORAL
# run()

#* Ejecutar acci√≥n sin decir jarvis antes
# def justRun():
#     finish()
#     run()
#     search()
#     info()
#     send()
#     time()
#     disponibilidad()
#     who_i_am()

#* GEMINI Pro
# google_api_key = os.getenv('GOOGLE_API_KEY')

# Or use `os.getenv('GOOGLE_API_KEY')` to fetch an environment variable.
# google_api_key = userdata.get('GOOGLE_API_KEY')

# print(google_api_key) 
# print(type(google_api_key))

# model = genai.GenerativeModel('gemini-pro')
# chat = model.start_chat(history=[])

# response = chat.send_message("Dime como puedo crear una funcion en python.")
# to_markdown(response.text)
# print(response.text)
# print(chat.history)

# model = genai.GenerativeModel('gemini-pro')
# chat = model.start_chat(history=[])
# print(model.count_tokens)
# print(chat.model)

# response = chat.send_message(
#     "Pretend you\'re a snowman and stay in character for each response.")
# # print(response.text)

# response = chat.send_message(
#     "What\'s your favorite season of the year?")
# # print(response.text)




# google_api_key = os.getenv('GOOGLE_API_KEY')
# genai.configure(api_key= google_api_key)

# model = genai.get_model("tunedModels/gemini-pro") # Elige el modelo gemini-pro
# prompt = "¬øQu√© es la inteligencia artificial?" # Define tu entrada de texto
# response = model.generateContent(prompt=prompt) # Genera una respuesta de texto
# print(response) # Imprime la respuesta